-----------------------------SUBJECT: Functions 

- Store the Return value of a function in a variable to use it anywhere! Give it a name then call the function! ex const x = func(parameter)! **IMPORTANT**
- Receive input data, transform data, then output data!
- array.indexOf() will return a number!
- array.includes() will return true or false!
 
 -----------------------------SUBJECT: LOOPS ----------------

 - Continue - if the condition is not true the code will hit continue and will not execute what is below the continue. It will go back to the next interation

 - Break - The break will immidiattly exit the whole loop when the condition is met. If (x === 'number') break; it wont execute nothing after this.


------------------------------SUBJECT: SOLVING PROBLEMS WORK FLOW---

Project Manager: "We need a function that reverses whatever we pass into it"

1- What does "whatever" even mean in this context?
What should be reversed? Answer: Only strings, numbers and arrays make sense
to reverse...
- What to do if something else is passed in?
- What should be returned? Should it always be a string, or shoulod the type
be the same as passed in?
- How to recognize whether the argument is a number, a string or an array?
- How to reverse a number, a string and an array?

2- Dived and Conquer
- Sub-Problems:

- Check if argument is a number, a string or an array
- Implement reversing a number
- Implement reversing a string 
- Implement reversing an array
- Return a value

3- The research:

- How to check if a value is a number in javascript
- How to check if a value is a string in javascript
- How to check if a value is an array in javascript
- How to reverse a number in javascript
- How to reverse a string in javascript
- How to reverse an array in javascript

4- Write psudo code ex:

function reverse(value)

if value type !string && !number $$ !array
return value 

if value type == string 
reverse string
if value type == number
reverse number
if value type == array
reverse array

return reversed value


------------------------------SUBJECT: THIS & ARGUMENTS - KEYWORDS ------------------


// // 1  IMPORTANT  NEVER USE A ARROW FUNCTION AS A METHOD! To avoid conflicts with the this keyword

// // 2  IMPORTANT  inside a regular function call the this keyword is undefined! 

// // 3  IMPORTANT arrow function do not have its own THIS keyword. It would call its parent in the scope to use their 'this' keyword, which is the window and on window there is no fristName. **before var firstName is created

// // 4  IMPORTANT this is not a code block its a object literal! thats why the arrow function wont have this as a parent

// // 5  IMPORTANT setting self to this I'm outside the function so I can call self

// // 6  IMPORTANT on solution 2 using the we use arrow function that dont have its own this keyword, so it looks at its parent this keyword! While on solution 1 regular function have its own this keyword, making it us having to declare a new variable pointing to the parent element for the this keyword!

// // 7  IMPORTANT Arguments keyword its only available in regular functions



------------------------------SUBJECT: SPREAD OPERATOR - REST AND DESTRUCTURING ------------------


// // 1 IMPORTANT those constants will be the value of each array item! The array is preserved

// // 2 IMPORTANT we dont need let or const just to reasign the variables in the destructuring method!

// // 3 IMPORTANT Destructuring Arrays we use [] 

// // 4 IMPORTANT Destructuring Objects we use {} 

// // 5 IMPORTANT Destructuring Objects the order is irrelevant

// // 6 IMPORTANT If we want the properties names to be different than the variables names

// // 7 IMPORTANT Default value can be assigned at the distructuring. It will be applied if arguments havent been passed

// // 8 IMPORTANT the REST operator must be the last so it can collect the rest of the data.


------------------------------SUBJECT: || && OPERATORS --------------------------------------------

// // 1 IMPORTANT (short-circuit evaluation means if the first value is a thruthy value it will immiattly return the thruthy value and the other operand will not be evaluated)

// // 2 IMPORTANT The && operator is only true if all the operands are true. When the first operatorand is thruthy it will only print the second operand, since it still needs to confirm the second operand so on and so forth.

// // 3 IMPORTANT The nullish operator works with the principle of null values, only 'null' and 'undefined' values will short-circuit the operand

// // 4 IMPORTANT The &&= does is assigns a value to a variable if is currently thruthy

------------------------------SUBJECT: || OBJECTS --------------------------------------------

// //  IMPORTANT if you want to use variables name as a object properties name you have to use with brackets object[variableName] 












 -- vscode settings --

- For todo Highlights settings. "BUG TODO" This config. is under settings.json on vscode under settings the third icond from right to left the icon reads open settings.json when mouse over.

- Prettier default format. 

- go to settings type default form and on editor choos Prettier Code formatter
- go to settings  type formatons and check the box it will save and format the code.


- USER SNIPPETS ----

- under preferences > configure user snippets 
- create a new file anyname 
- edit what you need inside