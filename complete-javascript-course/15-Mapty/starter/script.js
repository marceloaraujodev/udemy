'use strict';

// prettier-ignore
const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

if(navigator.geolocation)
navigator.geolocation.getCurrentPosition(function(position){
// console.log(position)
const {latitude} = position.coords
const {longitude} = position.coords
// console.log(latitude)
// console.log(longitude)
// console.log(`https://www.google.com/maps/@${latitude},${longitude}`)

const coords = [latitude, longitude]

const map = L.map('map').setView(coords, 13); // 13 zoom level on load
// console.log(map)

L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map);

    map.on('click', function(mapEvent) {
        console.log(mapEvent)
        // console.log(mapEvent.latlng.lat, mapEvent.latlng.lng)
        const {lat, lng} = mapEvent.latlng
        console.log(lat, 'lat', 'lng', lng)

        L.marker([lat, lng]).addTo(map)
        .bindPopup(L.popup({
            maxWidth: 250,
            minWidth: 100,
            autoClose: false,
            closeOnClick: false,
            className: 'running-popup',
        })).setPopupContent('Running')
        .openPopup();

    })

}, function(){
    alert('Could not get your position')
})








//                                      TITLE PLANNING A PROJECT

/*
1. User Stories: 
Description of the applications functionality from the user's perespective. All user stories put together describe the entire application.

 Common format: As a [type of user], I want [an action] so that [a benefit]
type of user: user, admin, etc.    Action: what?    Benefit: Why?

ðŸ‘‰ As a user, I want to log my running workouts with location, distance, time, pace and steps/min, so I can keep a log of all my running.

ðŸ‘‰ log all my cycling workouts, with location, distance, time, speed and elevation gain.

ðŸ‘‰ See all workouts at a glance

ðŸ‘‰ See workouts on a map, where do I workout the most

ðŸ‘‰ See workouts when I leave the app and come back later, dot erase the data.


2. Features:

ðŸ‘‰ Map where user clicks to add new workout (best ways to get location coordinates)

ðŸ‘‰ Geolocation to display map at current location (more user friendly)

ðŸ‘‰ Form to input distance, time, pace, steps/min

ðŸ‘‰ Form to input distance, time, speed, elevation gain

ðŸ‘‰ Display all workouts in a list

ðŸ‘‰ Display workouts on the map

ðŸ‘‰ Store workout data in the browser using local storage API

ðŸ‘‰ On page load, read the saved data from local storage and display



3. Flowchart:
What we will build:

ðŸ‘‰ Geolocation to display map at current location

ðŸ‘‰ Map where user clicks to add new workout 

ðŸ‘‰ Use colors on the flow to make it easier to assimilate, yellow for action, green for rendering info

ðŸ‘‰ Its normal that the flowchart changes during the process.


Flow: 
Page loads âž¡ 1. Async Get current location coordinates âž¡ 2. Render map on current location 
âž¡ user click on map âž¡ 3. 4. render workout form âž¡ user submits new workout 
âž¡ 5. render workout on map âž¡ 6. render workout list âž¡ 7. Store workouts in local storage 
âž¡ 8. Load workouts from local storage âž¡ Move map to workout location


4. Architecture:
How we will build it. How to implement and organize it. Strategies for efficency to avoid spaguetthi code


5. Development Step:
Implementation of our plan using code.

*/

